<?php

use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\Entity\Node;

/**
 * Implements hook_form_alter().
 */
function cuba_common_configuration_form_alter(&$form, &$form_state, $form_id) {

  // If we are on a web page node edit, then add global-stylings so that paragraphs are viewable.
  if ($form_id == 'node_cuba_ct_web_page_form' || 'node_cuba_ct_web_page_edit_form') {
    $form['#attached']['library'][] = 'cuba_theme/global-styling';
  }

  // If we are on a search form then unset the types of searches and languages.
  if ($form_id == 'search_form') {
    unset($form['advanced']['types-fieldset']);
    unset($form['advanced']['lang-fieldset']);
  }

  if ($form_id == 'node_cuba_ct_conference_section_form') {
    unset($form['langcode']);
  }
}

/**
 * Implements hook_page_attachments().
 */
function cuba_common_configuration_page_attachments(array &$page) {
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  $current_path = \Drupal::service('path.current')->getPath();
  if ($is_admin || $current_path == '/dashboard/cuba_my_dashboard') {
    $page['#attached']['library'][] = 'cuba_theme/admin-extras';
    return;
  }
}

/*
 * Implements hook_preprocess_html().
 */
function cuba_common_configuration_preprocess_html(&$variables) {

  // Get the current path.
  $current_path = \Drupal::service('path.current')->getPath();

  // Get the alias.
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  // Check if we are on a past and future conference page and add extra class.
  if ($path_alias == '/past-and-future-conferences' || $path_alias == '/conferences-precedentes-et-futures') {

    // Add extra class for styling.
    $variables['attributes']['class'][] = 'past-and-future';
  }

  // If we are user 1, add the language class.
  if (\Drupal::currentUser()->id() == 1) {

    // Get the current language.
    $language =  \Drupal::languageManager()->getCurrentLanguage()->getName();

    // Set the language as a CSS class in the body.
    if ($language == 'Francais') {
      $variables['attributes']['class'][] = 'french';
    }
    else if ($language == 'English') {
      $variables['attributes']['class'][] = 'english';
    }
  }
  // Not user 1, so check for roles and then add CSS class.
  else {

    // Get the role of the current user.
    $user_roles = \Drupal::currentUser()->getRoles();

    // Set the allowed roles.
    $allowed_roles = ['cuba_role_site_manager', 'cuba_role_content_editor'];

    // Step through each user role and see if we add the language class.
    foreach ($user_roles as $user_role) {

      // If the user role is in the allowed roles, add the language class.
      if (in_array($user_role, $allowed_roles)) {

        // Get the current language.
        $language = \Drupal::languageManager()->getCurrentLanguage()->getName();

        // Set the language as a CSS class in the body.
        if ($language == 'Francais') {
          $variables['attributes']['class'][] = 'french';
        } else if ($language == 'English') {
          $variables['attributes']['class'][] = 'english';
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function cuba_common_configuration_theme($existing, $type, $theme, $path) {
  return [
    'cuba_management_links' => [
      'variables' => [
        'links' => NULL,
      ],
    ],
    'cuba_content_creation_links' => [
      'variables' => [
        'links' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_toolbar_alter().
 */
function cuba_common_configuration_toolbar_alter(&$items) {

  // Move the 'Dashboards' link at the left of the tooltar.
  $items['dashboards']['#weight'] = -15;

  // Rename 'Dashboards' to 'Workbench'.
  $items['dashboards']['tab']['#title'] = 'Workbench';

  // Get the current user.
  $current_user = \Drupal::currentUser();

  // Ensure that we are not user 1.
  if ($current_user->id() !== '1') {

    // Load in the roles.
    $roles = $current_user->getRoles();

    // As long as not an administrator, remove the Manage link from the toolbar.
    if (!in_array('administrator', $roles)) {

      // Remove the manage link.
      unset($items['administration']);
    }
  }
}

/**
 * Implements hook_query_search_node_search_alter().
 *
 * Ensure that the search is only in the users current language.
 */
function cuba_common_configuration_query_search_node_search_alter(&$query) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $query->condition('i.langcode', array($language, 'und', 'zxx'), 'IN');
}

/**
 * Helper function to clone nodes during a batch process.
 *
 * @param $clone_info
 * @param $operation_details
 * @param $context
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function cuba_common_configuration_clone_nodes($clone_info, $operation_details, &$context) {

  // Load the node to be cloned.
  $node = Node::load($clone_info['nid']);

  // Duplicate the node.
  $nodeDuplicate = $node->createDuplicate();

  // Step through each of the fields in the duplicated node and duplicate that field.
  foreach ($nodeDuplicate->field_cuba_cs_section as $field) {
    $field->entity = $field->entity->createDuplicate();
  }

  // Set the conference name field to the conference to be cloned to.
  $nodeDuplicate->field_cuba_cs_conference_name->target_id = $clone_info['to_conference'];

  // Set the status to unpublished.
  $nodeDuplicate->status = 0;

  // Set creation time, so it shows up later in the content list.
  $nodeDuplicate->created = time();

  // Save the duplicated node.
  $nodeDuplicate->save();

  // Get the translation of the node.
  $node_translation = $nodeDuplicate->getTranslation('fr');

  // Set the new conference name.
  $node_translation->field_cuba_cs_conference_name->target_id = $clone_info['to_conference'];

  // Set the status to unpublished.
  $node_translation->status = 0;

  // Set the creation time to now, so that it appears first in the content list.
  $node_translation->created = time();

  // Save the node translation.
  $node_translation->save();

  // Setup the menu link for the node.
  $menu_link = MenuLinkContent::create(array(
    'title' => $nodeDuplicate->getTitle(),
    'link' => ['uri' => 'entity:node/' . $nodeDuplicate->id()],
    'menu_name' => 'cuba-menu-conferences',
    'weight' => 0,
    'parent' => 'taxonomy_menu.menu_link:taxonomy_menu.menu_link.cuba_tax_menu_conferences.' . $clone_info['to_conference'],
  ));

  // Save the menu link.
  $menu_link->save();

  // Add a translation for the menu link.
  $menu_link->addTranslation('fr');

  // Get the translation for the menu link.
  $menu_link_translation = $menu_link->getTranslation('fr');

  // Set the title of the menu link translation.
  $menu_link_translation->title = $node_translation->getTitle();

  // Save the menu link translation.
  $menu_link_translation->save();

  // Store some results for post-processing in the 'finished' callback.
  // The contents of 'results' will be available as $results in the
  // 'finished' function (in this example, batch_example_finished()).
  $context['results'][] = $clone_info;

  // Optional message displayed under the progressbar.
  $context['message'] = t('Running Batch "@id" @details',
    ['@id' => $clone_info['id'], '@details' => $operation_details]
  );
}
